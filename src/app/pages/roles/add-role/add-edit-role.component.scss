// Use :host to ensure styles are scoped to this component and won't affect other pages.
:host {
  // --- LAYOUT STYLES ---

  // 1. Center the form and give it a maximum width.
  .form-container {
    max-width: 1024px;
    margin: 0 auto; // Centers the container horizontally
    padding: 2rem;
    border-radius: 8px;
    background-color: #ffffff;
  }

  // 2. Create the flexbox grid container.
  .form-grid {
    display: flex;
    flex-wrap: wrap; // Allows items to wrap to the next line on small screens
    margin: 0 -1rem; // Negative margin trick to handle padding on columns
  }

  // 3. Define the columns.
  .form-col {
    width: 100%; // Mobile-first: columns are full-width by default.
    padding: 0 1rem; // Gutter/spacing between columns.
    box-sizing: border-box;
    margin-bottom: 1.5rem; // Vertical spacing between rows.
  }

  // 4. Apply the two-column layout on larger screens (768px and wider).
  @media (min-width: 768px) {
    .form-col {
      width: 50%;
    }
  }


  // --- FORM ELEMENT STYLES ---

  // Replicate the p-fluid behavior to make inputs take up 100% of their container's width.
  ::ng-deep {
    .p-inputtext,
    .p-select {
      width: 100%;
    }

    // Style invalid PrimeNG inputs with a red border.
    .ng-invalid.ng-dirty {
      &.p-inputtext {
        border-color: #f44336; // Red color for errors
      }
    }
  }

  // Styles for the form field labels
  .field label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
  }

  .required-star {
    color: #f44336;
  }

  .p-error {
    color: #f44336;
  }
  
  // Align checkboxes. Since they don't have a label on top, we don't need margin.
  .field-checkbox {
    display: flex;
    align-items: center;
    // Set a height to ensure consistent spacing with the text input row
    min-height: 40px; 
    padding-top: 0.5rem; // Add a little padding to align text nicely
  }
}